// mongodb api/mongodb api/seed.ts
import { projectsService } from './services/projects.service';
import { storiesService } from './services/stories.service';
import { tasksService } from './services/tasks.service';
import { usersService } from './services/users.service';

async function seedDatabase() {
    try {
        console.log('üå± Seedowanie bazy danych...');
        
        // 1. Tworzenie u≈ºytkownik√≥w
        console.log('üë• Tworzenie u≈ºytkownik√≥w...');
        // ‚úÖ FIX: Dodaj createdAt i updatedAt
        const adminId = await usersService.createUser({
            firstName: 'Jan',
            lastName: 'Kowalski',
            email: 'jan.kowalski@company.com',
            role: 'admin',
            createdAt: new Date(),
            updatedAt: new Date()
        });
        
        const dev1Id = await usersService.createUser({
            firstName: 'Anna',
            lastName: 'Nowak',
            email: 'anna.nowak@company.com',
            role: 'developer',
            createdAt: new Date(),
            updatedAt: new Date()
        });
        
        const dev2Id = await usersService.createUser({
            firstName: 'Piotr',
            lastName: 'Wi≈õniewski',
            email: 'piotr.wisniewski@company.com',
            role: 'developer',
            createdAt: new Date(),
            updatedAt: new Date()
        });
        
        const devops1Id = await usersService.createUser({
            firstName: 'Katarzyna',
            lastName: 'W√≥jcik',
            email: 'katarzyna.wojcik@company.com',
            role: 'devops',
            createdAt: new Date(),
            updatedAt: new Date()
        });
        
        // 2. Tworzenie projekt√≥w
        console.log('üìÅ Tworzenie projekt√≥w...');
        // ‚úÖ FIX: Dodaj createdAt i updatedAt
        const project1Id = await projectsService.createProject({
            name: 'System zarzƒÖdzania projektami',
            description: 'Aplikacja webowa do zarzƒÖdzania projektami, zadaniami i zespo≈Çami',
            createdAt: new Date(),
            updatedAt: new Date()
        });
        
        const project2Id = await projectsService.createProject({
            name: 'E-commerce Platform',
            description: 'Platforma handlowa z panelem administratora i systemem p≈Çatno≈õci',
            createdAt: new Date(),
            updatedAt: new Date()
        });
        
        // 3. Tworzenie historyjek
        console.log('üìñ Tworzenie historyjek...');
        // ‚úÖ FIX: Dodaj createdAt i updatedAt
        const story1Id = await storiesService.createStory({
            name: 'System logowania u≈ºytkownik√≥w',
            description: 'Implementacja bezpiecznego systemu logowania z JWT',
            priority: 'high',
            projectId: project1Id,
            state: 'doing',
            ownerId: adminId,
            createdAt: new Date(),
            updatedAt: new Date()
        });
        
        const story2Id = await storiesService.createStory({
            name: 'Kanban board',
            description: 'Interaktywna tablica Kanban do zarzƒÖdzania zadaniami',
            priority: 'high',
            projectId: project1Id,
            state: 'todo',
            ownerId: adminId,
            createdAt: new Date(),
            updatedAt: new Date()
        });
        
        const story3Id = await storiesService.createStory({
            name: 'Koszyk zakupowy',
            description: 'Funkcjonalno≈õƒá dodawania produkt√≥w do koszyka i sk≈Çadania zam√≥wie≈Ñ',
            priority: 'medium',
            projectId: project2Id,
            state: 'todo',
            ownerId: adminId,
            createdAt: new Date(),
            updatedAt: new Date()
        });
        
        // 4. Tworzenie zada≈Ñ
        console.log('‚úÖ Tworzenie zada≈Ñ...');
        
        // Zadania dla Story 1
        // ‚úÖ FIX: Dodaj createdAt i updatedAt
        await tasksService.createTask({
            name: 'Implementacja JWT auth',
            description: 'Stworzenie middleware do weryfikacji token√≥w JWT',
            priority: 'high',
            storyId: story1Id,
            estimatedTime: 8,
            state: 'doing',
            assignedUserId: dev1Id,
            startDate: new Date(),
            createdAt: new Date(),
            updatedAt: new Date()
        });
        
        await tasksService.createTask({
            name: 'Formularz logowania',
            description: 'Frontend - komponenty formularza logowania i rejestracji',
            priority: 'high',
            storyId: story1Id,
            estimatedTime: 4,
            state: 'done',
            assignedUserId: dev2Id,
            startDate: new Date(Date.now() - 2 * 24 * 60 * 60 * 1000), // 2 dni temu
            endDate: new Date(Date.now() - 1 * 24 * 60 * 60 * 1000), // wczoraj
            createdAt: new Date(),
            updatedAt: new Date()
        });
        
        await tasksService.createTask({
            name: 'Konfiguracja bazy danych',
            description: 'Stworzenie tabel u≈ºytkownik√≥w i sesji',
            priority: 'medium',
            storyId: story1Id,
            estimatedTime: 3,
            state: 'todo',
            createdAt: new Date(),
            updatedAt: new Date()
        });
        
        // Zadania dla Story 2
        await tasksService.createTask({
            name: 'Komponenty Kanban',
            description: 'Stworzenie komponent√≥w React dla tablicy Kanban',
            priority: 'high',
            storyId: story2Id,
            estimatedTime: 12,
            state: 'todo',
            createdAt: new Date(),
            updatedAt: new Date()
        });
        
        await tasksService.createTask({
            name: 'Drag & Drop',
            description: 'Implementacja przeciƒÖgania zada≈Ñ miƒôdzy kolumnami',
            priority: 'medium',
            storyId: story2Id,
            estimatedTime: 6,
            state: 'todo',
            createdAt: new Date(),
            updatedAt: new Date()
        });
        
        // Zadania dla Story 3
        await tasksService.createTask({
            name: 'API koszyka',
            description: 'Endpointy do zarzƒÖdzania koszykiem zakupowym',
            priority: 'medium',
            storyId: story3Id,
            estimatedTime: 5,
            state: 'todo',
            createdAt: new Date(),
            updatedAt: new Date()
        });
        
        console.log('üéâ Seedowanie zako≈Ñczone pomy≈õlnie!');
        console.log('üìä Utworzono:');
        console.log('   - 4 u≈ºytkownik√≥w');
        console.log('   - 2 projekty');
        console.log('   - 3 historyjki');
        console.log('   - 6 zada≈Ñ');
        
    } catch (error) {
        console.error('‚ùå B≈ÇƒÖd podczas seedowania:', error);
    }
}

// Uruchom seeder je≈õli wywo≈Çano bezpo≈õrednio
if (require.main === module) {
    seedDatabase();
}

export default seedDatabase;