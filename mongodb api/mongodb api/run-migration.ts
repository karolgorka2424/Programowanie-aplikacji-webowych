import MigrationService from './migration/migrate-from-localstorage';
import * as fs from 'fs';
import * as path from 'path';

async function runMigration() {
    try {
        // Sprawd≈∫ czy istnieje plik z eksportem localStorage
        const exportPath = path.join(__dirname, 'localStorage-export.json');
        
        if (!fs.existsSync(exportPath)) {
            console.log('‚ùå Nie znaleziono pliku localStorage-export.json');
            console.log('üí° Uruchom nastƒôpujƒÖcy skrypt w konsoli przeglƒÖdarki:');
            console.log(MigrationService.generateLocalStorageExportScript());
            return;
        }
        
        // Wczytaj dane z pliku
        const exportData = JSON.parse(fs.readFileSync(exportPath, 'utf8'));
        
        console.log('üìÇ Znaleziono plik eksportu localStorage');
        console.log(`üìÖ Data eksportu: ${exportData.exportDate}`);
        console.log(`üìä Zawiera:`);
        console.log(`   - ${exportData.projects?.length || 0} projekt√≥w`);
        console.log(`   - ${exportData.stories?.length || 0} historyjek`);
        console.log(`   - ${exportData.tasks?.length || 0} zada≈Ñ`);
        console.log(`   - ${exportData.users?.length || 0} u≈ºytkownik√≥w`);
        
        // Potwierd≈∫ migracjƒô
        const readline = require('readline');
        const rl = readline.createInterface({
            input: process.stdin,
            output: process.stdout
        });
        
        // ‚úÖ FIX: Dodaj typ dla parametru answer
        rl.question('Czy chcesz kontynuowaƒá migracjƒô? (y/n): ', async (answer: string) => {
            if (answer.toLowerCase() === 'y' || answer.toLowerCase() === 'yes') {
                await MigrationService.migrateFromLocalStorage(exportData);
            } else {
                console.log('‚ùå Migracja anulowana');
            }
            rl.close();
        });
        
    } catch (error) {
        console.error('‚ùå B≈ÇƒÖd podczas migracji:', error);
    }
}

// Uruchom migracjƒô je≈õli wywo≈Çano bezpo≈õrednio
if (require.main === module) {
    runMigration();
}